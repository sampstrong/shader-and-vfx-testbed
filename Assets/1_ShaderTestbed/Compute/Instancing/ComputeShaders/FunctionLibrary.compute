#pragma kernel FunctionKernel

RWStructuredBuffer<float3> _Positions;

uint _Resolution;
float _Step, _Time;

float2 GetUV (uint3 id)
{
    return (id.xy + 0.5) * _Step - 1.0;
}

void SetPosition (uint3 id, float3 position)
{
    // store only if x and y id are less than resolution
    // avoids going out of bounds if resolution isn't a multiple of 8
    if (id.x < _Resolution && id.y < _Resolution)
    {
        _Positions[id.x + id.y * _Resolution] = position;
    }
}

#define PI 3.14159265358979323846

float3 Wave(float u, float v, float t)
{
    float3 p;
    p.x = u;
    p.y = sin(PI * (u + v + t));
    p.z = v;
    return p;
}

[numthreads(8, 8, 1)]
void FunctionKernel (uint3 id: SV_DispatchThreadID)
{
    float2 uv = GetUV(id);
    SetPosition(id, Wave(uv.x, uv.y, _Time));
}

